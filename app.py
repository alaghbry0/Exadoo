
import asyncpg
import logging
import os
import asyncio
import hypercorn.config
import hypercorn.asyncio
import aiohttp  # โ ุงุณุชูุฑุงุฏ aiohttp
from quart import Quart
from quart_cors import cors
from config import DATABASE_CONFIG
from routes.subscriptions import subscriptions_bp
from routes.users import user_bp
from routes.shop import shop
from routes.payment_confirmation import payment_confirmation_bp
#from routes.webhook import payments_bp
#from routes.webhook import webhook_bp
from telegram_bot import start_bot, bot, telegram_bot_bp  # โ ุงุณุชุฎุฏุงู `telegram_bot_bp`
from chatbot.chatbot import chatbot_bp
from utils.scheduler import start_scheduler
from utils.db_utils import close_telegram_bot_session
from Crypto.Signature import pkcs1_15
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256

# โ ุงูุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุงูุฃุณุงุณูุฉ ูุจู ุชุดุบูู ุงูุชุทุจูู
REQUIRED_ENV_VARS = ["PRIVATE_KEY", "TELEGRAM_BOT_TOKEN", "WEBHOOK_SECRET", "PORT", "WEBHOOK_URL"]
for var in REQUIRED_ENV_VARS:
    if not os.environ.get(var):
        raise ValueError(f"โ ูุชุบูุฑ ุงูุจูุฆุฉ {var} ุบูุฑ ูุถุจูุท. ุงูุฑุฌุงุก ุงูุชุฃูุฏ ูู ุงูุฅุนุฏุงุฏุงุช.")

# ๐น ุฅูุดุงุก ุงูุชุทุจูู
app = Quart(__name__)

# โ ุฌูุณุฉ aiohttp ุนุงูุฉ ูููู ุงุณุชุฎุฏุงููุง ูู ูู ููุงู
app.aiohttp_session = None

# ๐น ุถุจุท CORS ููุณูุงุญ ุจูุตุงุฏุฑ ูุญุฏุฏุฉ ููุท
ALLOWED_ORIGINS = ["https://exadooo-git-main-mohammeds-projects-3d2877c6.vercel.app", "https://exadoo.onrender.com", "https://telegram.org, http://localhost:5000"]
app = cors(app, allow_origin=ALLOWED_ORIGINS)

# ๐น ุชุณุฌูู ููุงุท API
app.register_blueprint(subscriptions_bp)
app.register_blueprint(user_bp)
app.register_blueprint(shop)
app.register_blueprint(payment_confirmation_bp)
#app.register_blueprint(webhook_bp)
app.register_blueprint(telegram_bot_bp)  # โ ุชุบููุฑ ุงูุงุณู ุฅูู `telegram_bot_bp`
# ุชุณุฌูู Blueprint ุงูุจูุช ุงูุฎุงุต ุจุงูุฏุฑุฏุดุฉ ูุน URL prefix
app.register_blueprint(chatbot_bp, url_prefix="/bot")



# ๐น ุชุดุบูู Webhook ููุจูุช ุนูุฏ ุจุฏุก ุงูุชุทุจูู
@app.before_serving
async def create_db_connection():
    try:
        logging.info("๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...")
        app.db_pool = await asyncpg.create_pool(**DATABASE_CONFIG)
        app.aiohttp_session = aiohttp.ClientSession()
        logging.info("โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฅูุดุงุก ุฌูุณุฉ aiohttp ุจูุฌุงุญ.")
        app.bot = bot
        await start_scheduler(app.db_pool)  # โ ุชุดุบูู ุงูุฌุฏููุฉ
        if not getattr(app, "bot_running", False):  # โ ุชุฃูุฏ ูู ุฃู ุงูุจูุช ูู ูุชู ุชุดุบููู ุจุงููุนู
            app.bot_running = True
            asyncio.create_task(start_bot())  # โ ุชุดุบูู ุงูุจูุช ูุฑุฉ ูุงุญุฏุฉ ููุท

        logging.info("โ ุฌููุน ุงูุฎุฏูุงุช ุชู ุชุดุบูููุง ุจูุฌุงุญ.")

    except Exception as e:
        logging.critical(f"๐จ ูุดู ุจุฏุก ุงูุชุทุจูู: {e}")
        raise RuntimeError("๐จ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุดุบูู ุงูุชุทุจูู.") from e

# ๐น ุฅุบูุงู ุงูููุงุฑุฏ ุนูุฏ ุฅููุงู ุงูุชุทุจูู
@app.after_serving
async def close_resources():
    try:
        logging.info("๐ ุฌุงุฑู ุฅุบูุงู ุงูุฌูุณุงุช ุงูููุชูุญุฉ...")
        await close_telegram_bot_session()

        # โ ุฅุบูุงู ุฌูุณุฉ aiohttp ุฃููุงู
        if app.aiohttp_session:
            await app.aiohttp_session.close()
            logging.info("โ ุชู ุฅุบูุงู ุฌููุน ุฌูุณุงุช aiohttp ุจูุฌุงุญ.")

        # ๐น ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุนุฏ ุฐูู
        if app.db_pool:
            await app.db_pool.close()
            logging.info("โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ.")

    except Exception as e:
        logging.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุฅุบูุงู ุงูููุงุฑุฏ: {e}")

# ๐น ููุทุฉ ููุงูุฉ ุงุฎุชุจุงุฑูุฉ
@app.route("/")
async def home():
    return "๐ Exadoo API is running!"


# ๐น ุชุดุบูู ุงูุชุทุจูู ุจุงุณุชุฎุฏุงู Hypercorn
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))  # Heroku ูุญุฏุฏ ุงููููุฐ ุชููุงุฆููุง
    logging.info(f"๐ ุชุดุบูู Exadoo API ุนูู ุงููููุฐ {port}...")

    config = hypercorn.Config()
    config.bind = [f"0.0.0.0:{port}"]  # ุงุณุชุฎุฏุงู ุงููููุฐ ุงูุตุญูุญ

    asyncio.run(hypercorn.asyncio.serve(app, config))