import asyncpg
import logging
import os
from quart import Quart
from quart_cors import cors
from config import DATABASE_CONFIG
from routes.subscriptions import subscriptions_bp
from routes.users import user_bp
from routes.shop import shop
from routes.telegram_webhook import payments_bp
from backend.telegram_bot import init_bot, start_telegram_bot, setup_webhook
from utils.scheduler import start_scheduler
from utils.db_utils import close_telegram_bot_session
from Crypto.Signature import pkcs1_15
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256

# โ ุงูุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุงูุฃุณุงุณูุฉ ูุจู ุชุดุบูู ุงูุชุทุจูู
REQUIRED_ENV_VARS = ["PRIVATE_KEY", "TELEGRAM_BOT_TOKEN", "WEBHOOK_SECRET"]
for var in REQUIRED_ENV_VARS:
    if not os.environ.get(var):
        raise ValueError(f"โ ูุชุบูุฑ ุงูุจูุฆุฉ {var} ุบูุฑ ูุถุจูุท. ุงูุฑุฌุงุก ุงูุชุฃูุฏ ูู ุงูุฅุนุฏุงุฏุงุช.")

# ๐น ุฅูุดุงุก ุงูุชุทุจูู
app = Quart(__name__)

# ๐น ุถุจุท CORS ููุณูุงุญ ุจูุตุงุฏุฑ ูุญุฏุฏุฉ ููุท
ALLOWED_ORIGINS = ["https://exadoo.onrender.com", "https://telegram.org"]
app = cors(app, allow_origin=ALLOWED_ORIGINS)

# ๐น ุฅุนุฏุงุฏ ุชุณุฌูู ุงูุฃุฎุทุงุก ูุงููุนูููุงุช
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ๐น ุชุญููู ุงูููุชุงุญ ุงูุฎุงุต
private_key_content = os.environ.get("PRIVATE_KEY")
private_key = RSA.import_key(private_key_content)

# ๐น ุชูููุน ุจูุงูุงุช ููููุฉ (ููุงุฎุชุจุงุฑ ููุท)
message = b"transaction data"
hash_msg = SHA256.new(message)
signature = pkcs1_15.new(private_key).sign(hash_msg)
logging.info(f"โ ุชู ุชูููุน ุงูุจูุงูุงุช ุจูุฌุงุญ: {signature.hex()}")

# ๐น ุชุณุฌูู ููุงุท API
app.register_blueprint(subscriptions_bp)
app.register_blueprint(user_bp)
app.register_blueprint(shop)
app.register_blueprint(payments_bp)

# ๐น ูุธููุฉ ุชุดุบูู ุงูุฌุฏููุฉ
async def setup_scheduler():
    logging.info("๐ ุจุฏุก ุชุดุบูู ุงูุฌุฏููุฉ...")
    try:
        await start_scheduler(app.db_pool)
        logging.info("โ ุชูุช ุฌุฏููุฉ ุงูููุงู ุจูุฌุงุญ.")
    except Exception as e:
        logging.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุฅุนุฏุงุฏ ุงูุฌุฏููุฉ: {e}")

# ๐น ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุจู ุชุดุบูู ุงูุชุทุจูู
@app.before_serving
async def create_db_connection():
    try:
        logging.info("๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...")
        app.db_pool = await asyncpg.create_pool(**DATABASE_CONFIG)
        logging.info("โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ.")

        await setup_scheduler()
        await init_bot()
        await setup_webhook()
        await start_telegram_bot()

    except asyncpg.exceptions.PostgresError as e:
        logging.critical(f"๐จ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        raise RuntimeError("๐จ ูุดู ุจุฏุก ุงูุชุทุจูู ุจุณุจุจ ูุดููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช.") from e

    except Exception as e:
        logging.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุฃู ุจุฏุก ุงูุฎุฏูุงุช: {e}")
        raise RuntimeError("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุดุบูู ุงูุชุทุจูู.") from e

# ๐น ุฅุบูุงู ุงูููุงุฑุฏ ุนูุฏ ุฅููุงู ุงูุชุทุจูู
@app.after_serving
async def close_resources():
    try:
        logging.info("๐ ุฌุงุฑู ุฅุบูุงู ุงูุฌูุณุงุช ุงูููุชูุญุฉ...")
        await close_telegram_bot_session()

        if app.db_pool:
            await app.db_pool.close()
            logging.info("โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ.")

    except Exception as e:
        logging.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุฅุบูุงู ุงูููุงุฑุฏ: {e}")

# ๐น ููุทุฉ ููุงูุฉ ุงุฎุชุจุงุฑูุฉ
@app.route("/")
async def home():
    return "๐ Exadoo API is running!"

# ๐น ุชุดุบูู ุงูุชุทุจูู
if __name__ == "__main__":
    logging.info(f"๐ ุชุดุบูู Exadoo API ุนูู ุงููููุฐ 5000...")
    app.run(debug=False, host="0.0.0.0", port=5000)
